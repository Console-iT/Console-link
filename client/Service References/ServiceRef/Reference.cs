//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Console_link.ServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Console_link", ConfigurationName="ServiceRef.ILinkService", CallbackContract=typeof(Console_link.ServiceRef.ILinkServiceCallback))]
    public interface ILinkService {
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/GetData", ReplyAction="Console_link/ILinkService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/GetData", ReplyAction="Console_link/ILinkService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/UploadContent", ReplyAction="Console_link/ILinkService/UploadContentResponse")]
        Console_link.Transfer UploadContent(Console_link.Transfer composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/UploadContent", ReplyAction="Console_link/ILinkService/UploadContentResponse")]
        System.Threading.Tasks.Task<Console_link.Transfer> UploadContentAsync(Console_link.Transfer composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/SubscribeEvent", ReplyAction="Console_link/ILinkService/SubscribeEventResponse")]
        void SubscribeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/SubscribeEvent", ReplyAction="Console_link/ILinkService/SubscribeEventResponse")]
        System.Threading.Tasks.Task SubscribeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/UnsubscribeEvent", ReplyAction="Console_link/ILinkService/UnsubscribeEventResponse")]
        void UnsubscribeEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/UnsubscribeEvent", ReplyAction="Console_link/ILinkService/UnsubscribeEventResponse")]
        System.Threading.Tasks.Task UnsubscribeEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/Publish", ReplyAction="Console_link/ILinkService/PublishResponse")]
        void Publish(Console_link.Transfer data);
        
        [System.ServiceModel.OperationContractAttribute(Action="Console_link/ILinkService/Publish", ReplyAction="Console_link/ILinkService/PublishResponse")]
        System.Threading.Tasks.Task PublishAsync(Console_link.Transfer data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILinkServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="Console_link/ILinkService/CallBackMethod")]
        void CallBackMethod(Console_link.Transfer data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILinkServiceChannel : Console_link.ServiceRef.ILinkService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LinkServiceClient : System.ServiceModel.DuplexClientBase<Console_link.ServiceRef.ILinkService>, Console_link.ServiceRef.ILinkService {
        
        public LinkServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LinkServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LinkServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LinkServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LinkServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public Console_link.Transfer UploadContent(Console_link.Transfer composite) {
            return base.Channel.UploadContent(composite);
        }
        
        public System.Threading.Tasks.Task<Console_link.Transfer> UploadContentAsync(Console_link.Transfer composite) {
            return base.Channel.UploadContentAsync(composite);
        }
        
        public void SubscribeEvent() {
            base.Channel.SubscribeEvent();
        }
        
        public System.Threading.Tasks.Task SubscribeEventAsync() {
            return base.Channel.SubscribeEventAsync();
        }
        
        public void UnsubscribeEvent() {
            base.Channel.UnsubscribeEvent();
        }
        
        public System.Threading.Tasks.Task UnsubscribeEventAsync() {
            return base.Channel.UnsubscribeEventAsync();
        }
        
        public void Publish(Console_link.Transfer data) {
            base.Channel.Publish(data);
        }
        
        public System.Threading.Tasks.Task PublishAsync(Console_link.Transfer data) {
            return base.Channel.PublishAsync(data);
        }
    }
}
